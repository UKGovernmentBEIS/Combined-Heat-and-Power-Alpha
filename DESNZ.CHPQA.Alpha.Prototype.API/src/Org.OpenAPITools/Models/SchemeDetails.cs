/*
 * CHPQA Alpha Prototype API
 *
 * CHPQA Schemes and Submissions Proxy/Facade API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class SchemeDetails : IEquatable<SchemeDetails>
    {

        /// <summary>
        /// Gets or Sets Sector
        /// </summary>
        [TypeConverter(typeof(CustomEnumConverter<SectorEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum SectorEnum
        {
            
            /// <summary>
            /// Enum ChemicalIndustryEnum for Chemical industry
            /// </summary>
            [EnumMember(Value = "Chemical industry")]
            ChemicalIndustryEnum = 1,
            
            /// <summary>
            /// Enum CommerceEnum for Commerce
            /// </summary>
            [EnumMember(Value = "Commerce")]
            CommerceEnum = 2,
            
            /// <summary>
            /// Enum ConstructionEnum for Construction
            /// </summary>
            [EnumMember(Value = "Construction")]
            ConstructionEnum = 3,
            
            /// <summary>
            /// Enum ElectricalAndInstrumentEngineeringEnum for Electrical and instrument engineering
            /// </summary>
            [EnumMember(Value = "Electrical and instrument engineering")]
            ElectricalAndInstrumentEngineeringEnum = 4,
            
            /// <summary>
            /// Enum ExtractionMiningAndAgglomerationEnum for Extraction, mining and agglomeration
            /// </summary>
            [EnumMember(Value = "Extraction, mining and agglomeration")]
            ExtractionMiningAndAgglomerationEnum = 5,
            
            /// <summary>
            /// Enum FoodBeveragesAndTobaccoEnum for Food, beverages and tobacco
            /// </summary>
            [EnumMember(Value = "Food, beverages and tobacco")]
            FoodBeveragesAndTobaccoEnum = 6,
            
            /// <summary>
            /// Enum IronAndSteelEnum for Iron and steel
            /// </summary>
            [EnumMember(Value = "Iron and steel")]
            IronAndSteelEnum = 7,
            
            /// <summary>
            /// Enum MechanicalEngineeringAndMetalProductsEnum for Mechanical engineering and metal products
            /// </summary>
            [EnumMember(Value = "Mechanical engineering and metal products")]
            MechanicalEngineeringAndMetalProductsEnum = 8,
            
            /// <summary>
            /// Enum MineralProductsEgGlassCementBricksEnum for Mineral products (eg glass, cement, bricks)
            /// </summary>
            [EnumMember(Value = "Mineral products (eg glass, cement, bricks)")]
            MineralProductsEgGlassCementBricksEnum = 9,
            
            /// <summary>
            /// Enum NonFerrousMetalsEnum for Non ferrous metals
            /// </summary>
            [EnumMember(Value = "Non ferrous metals")]
            NonFerrousMetalsEnum = 10,
            
            /// <summary>
            /// Enum OilRefineriesEnum for Oil refineries
            /// </summary>
            [EnumMember(Value = "Oil refineries")]
            OilRefineriesEnum = 11,
            
            /// <summary>
            /// Enum OtherEnum for Other
            /// </summary>
            [EnumMember(Value = "Other")]
            OtherEnum = 12,
            
            /// <summary>
            /// Enum OtherIndustrialBranchesEnum for Other industrial branches
            /// </summary>
            [EnumMember(Value = "Other industrial branches")]
            OtherIndustrialBranchesEnum = 13,
            
            /// <summary>
            /// Enum PaperPublishingAndPrintingEnum for Paper, publishing and printing
            /// </summary>
            [EnumMember(Value = "Paper, publishing and printing")]
            PaperPublishingAndPrintingEnum = 14,
            
            /// <summary>
            /// Enum PowerGenerationEnum for Power generation
            /// </summary>
            [EnumMember(Value = "Power generation")]
            PowerGenerationEnum = 15,
            
            /// <summary>
            /// Enum PublicAdministrationEnum for Public Administration
            /// </summary>
            [EnumMember(Value = "Public Administration")]
            PublicAdministrationEnum = 16,
            
            /// <summary>
            /// Enum SewageTreatmentEnum for Sewage treatment
            /// </summary>
            [EnumMember(Value = "Sewage treatment")]
            SewageTreatmentEnum = 17,
            
            /// <summary>
            /// Enum TextilesClothingAndFootwearEnum for Textiles, clothing and footwear
            /// </summary>
            [EnumMember(Value = "Textiles, clothing and footwear")]
            TextilesClothingAndFootwearEnum = 18,
            
            /// <summary>
            /// Enum TransportEnum for Transport
            /// </summary>
            [EnumMember(Value = "Transport")]
            TransportEnum = 19,
            
            /// <summary>
            /// Enum VehiclesEnum for Vehicles
            /// </summary>
            [EnumMember(Value = "Vehicles")]
            VehiclesEnum = 20
        }

        /// <summary>
        /// Gets or Sets Sector
        /// </summary>
        [Required]
        [DataMember(Name="sector", EmitDefaultValue=true)]
        public SectorEnum Sector { get; set; }


        /// <summary>
        /// Gets or Sets FuelBillFrequency
        /// </summary>
        [TypeConverter(typeof(CustomEnumConverter<FuelBillFrequencyEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum FuelBillFrequencyEnum
        {
            
            /// <summary>
            /// Enum MonthlyEnum for Monthly
            /// </summary>
            [EnumMember(Value = "Monthly")]
            MonthlyEnum = 1,
            
            /// <summary>
            /// Enum QuarterlyEnum for Quarterly
            /// </summary>
            [EnumMember(Value = "Quarterly")]
            QuarterlyEnum = 2,
            
            /// <summary>
            /// Enum AnnuallyEnum for Annually
            /// </summary>
            [EnumMember(Value = "Annually")]
            AnnuallyEnum = 3,
            
            /// <summary>
            /// Enum OtherEnum for Other
            /// </summary>
            [EnumMember(Value = "Other")]
            OtherEnum = 4
        }

        /// <summary>
        /// Gets or Sets FuelBillFrequency
        /// </summary>
        [Required]
        [DataMember(Name="fuelBillFrequency", EmitDefaultValue=true)]
        public FuelBillFrequencyEnum FuelBillFrequency { get; set; }

        /// <summary>
        /// Gets or Sets Diagrams
        /// </summary>
        [Required]
        [DataMember(Name="diagrams", EmitDefaultValue=false)]
        public List<string> Diagrams { get; set; }

        /// <summary>
        /// Gets or Sets PrimeMovers
        /// </summary>
        [Required]
        [DataMember(Name="primeMovers", EmitDefaultValue=false)]
        public List<SchemeDetailsPrimeMoversInner> PrimeMovers { get; set; }

        /// <summary>
        /// Gets or Sets Boilers
        /// </summary>
        [Required]
        [DataMember(Name="boilers", EmitDefaultValue=false)]
        public List<SchemeDetailsBoilersInner> Boilers { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SchemeDetails {\n");
            sb.Append("  Sector: ").Append(Sector).Append("\n");
            sb.Append("  FuelBillFrequency: ").Append(FuelBillFrequency).Append("\n");
            sb.Append("  Diagrams: ").Append(Diagrams).Append("\n");
            sb.Append("  PrimeMovers: ").Append(PrimeMovers).Append("\n");
            sb.Append("  Boilers: ").Append(Boilers).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((SchemeDetails)obj);
        }

        /// <summary>
        /// Returns true if SchemeDetails instances are equal
        /// </summary>
        /// <param name="other">Instance of SchemeDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SchemeDetails other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Sector == other.Sector ||
                    
                    Sector.Equals(other.Sector)
                ) && 
                (
                    FuelBillFrequency == other.FuelBillFrequency ||
                    
                    FuelBillFrequency.Equals(other.FuelBillFrequency)
                ) && 
                (
                    Diagrams == other.Diagrams ||
                    Diagrams != null &&
                    other.Diagrams != null &&
                    Diagrams.SequenceEqual(other.Diagrams)
                ) && 
                (
                    PrimeMovers == other.PrimeMovers ||
                    PrimeMovers != null &&
                    other.PrimeMovers != null &&
                    PrimeMovers.SequenceEqual(other.PrimeMovers)
                ) && 
                (
                    Boilers == other.Boilers ||
                    Boilers != null &&
                    other.Boilers != null &&
                    Boilers.SequenceEqual(other.Boilers)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + Sector.GetHashCode();
                    
                    hashCode = hashCode * 59 + FuelBillFrequency.GetHashCode();
                    if (Diagrams != null)
                    hashCode = hashCode * 59 + Diagrams.GetHashCode();
                    if (PrimeMovers != null)
                    hashCode = hashCode * 59 + PrimeMovers.GetHashCode();
                    if (Boilers != null)
                    hashCode = hashCode * 59 + Boilers.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(SchemeDetails left, SchemeDetails right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SchemeDetails left, SchemeDetails right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
