/*
 * CHPQA Alpha Prototype API
 *
 * CHPQA Schemes and Submissions Proxy/Facade API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class SchemeMeters : IEquatable<SchemeMeters>
    {
        /// <summary>
        /// Gets or Sets FuelMeters
        /// </summary>
        [Required]
        [DataMember(Name="fuelMeters", EmitDefaultValue=false)]
        public List<SchemeMetersFuelMetersInner> FuelMeters { get; set; }

        /// <summary>
        /// Gets or Sets ElectricityMeters
        /// </summary>
        [Required]
        [DataMember(Name="electricityMeters", EmitDefaultValue=false)]
        public List<SchemeMetersElectricityMetersInner> ElectricityMeters { get; set; }

        /// <summary>
        /// Gets or Sets HeatMeters
        /// </summary>
        [Required]
        [DataMember(Name="heatMeters", EmitDefaultValue=false)]
        public List<SchemeMetersElectricityMetersInner> HeatMeters { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SchemeMeters {\n");
            sb.Append("  FuelMeters: ").Append(FuelMeters).Append("\n");
            sb.Append("  ElectricityMeters: ").Append(ElectricityMeters).Append("\n");
            sb.Append("  HeatMeters: ").Append(HeatMeters).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((SchemeMeters)obj);
        }

        /// <summary>
        /// Returns true if SchemeMeters instances are equal
        /// </summary>
        /// <param name="other">Instance of SchemeMeters to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SchemeMeters other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    FuelMeters == other.FuelMeters ||
                    FuelMeters != null &&
                    other.FuelMeters != null &&
                    FuelMeters.SequenceEqual(other.FuelMeters)
                ) && 
                (
                    ElectricityMeters == other.ElectricityMeters ||
                    ElectricityMeters != null &&
                    other.ElectricityMeters != null &&
                    ElectricityMeters.SequenceEqual(other.ElectricityMeters)
                ) && 
                (
                    HeatMeters == other.HeatMeters ||
                    HeatMeters != null &&
                    other.HeatMeters != null &&
                    HeatMeters.SequenceEqual(other.HeatMeters)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (FuelMeters != null)
                    hashCode = hashCode * 59 + FuelMeters.GetHashCode();
                    if (ElectricityMeters != null)
                    hashCode = hashCode * 59 + ElectricityMeters.GetHashCode();
                    if (HeatMeters != null)
                    hashCode = hashCode * 59 + HeatMeters.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(SchemeMeters left, SchemeMeters right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SchemeMeters left, SchemeMeters right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
