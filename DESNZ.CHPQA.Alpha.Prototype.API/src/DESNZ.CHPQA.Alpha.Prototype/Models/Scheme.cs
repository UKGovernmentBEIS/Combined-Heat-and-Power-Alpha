/*
 * CHPQA Alpha Prototype API
 *
 * CHPQA Schemes and Submissions Proxy/Facade API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using DESNZ.CHPQA.Alpha.Prototype.Converters;

namespace DESNZ.CHPQA.Alpha.Prototype.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Scheme : IEquatable<Scheme>
    {
        /// <summary>
        /// Gets or Sets Info
        /// </summary>
        [Required]
        [DataMember(Name="info", EmitDefaultValue=false)]
        public SchemeInfo Info { get; set; }

        /// <summary>
        /// Gets or Sets Details
        /// </summary>
        [Required]
        [DataMember(Name="details", EmitDefaultValue=false)]
        public SchemeDetails Details { get; set; }

        /// <summary>
        /// Gets or Sets Meters
        /// </summary>
        [Required]
        [DataMember(Name="meters", EmitDefaultValue=false)]
        public SchemeMeters Meters { get; set; }

        /// <summary>
        /// Gets or Sets AdditionalInformation
        /// </summary>
        [Required]
        [DataMember(Name="additionalInformation", EmitDefaultValue=false)]
        public SchemeAdditionalInformation AdditionalInformation { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Scheme {\n");
            sb.Append("  Info: ").Append(Info).Append("\n");
            sb.Append("  Details: ").Append(Details).Append("\n");
            sb.Append("  Meters: ").Append(Meters).Append("\n");
            sb.Append("  AdditionalInformation: ").Append(AdditionalInformation).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Scheme)obj);
        }

        /// <summary>
        /// Returns true if Scheme instances are equal
        /// </summary>
        /// <param name="other">Instance of Scheme to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Scheme other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Info == other.Info ||
                    Info != null &&
                    Info.Equals(other.Info)
                ) && 
                (
                    Details == other.Details ||
                    Details != null &&
                    Details.Equals(other.Details)
                ) && 
                (
                    Meters == other.Meters ||
                    Meters != null &&
                    Meters.Equals(other.Meters)
                ) && 
                (
                    AdditionalInformation == other.AdditionalInformation ||
                    AdditionalInformation != null &&
                    AdditionalInformation.Equals(other.AdditionalInformation)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Info != null)
                    hashCode = hashCode * 59 + Info.GetHashCode();
                    if (Details != null)
                    hashCode = hashCode * 59 + Details.GetHashCode();
                    if (Meters != null)
                    hashCode = hashCode * 59 + Meters.GetHashCode();
                    if (AdditionalInformation != null)
                    hashCode = hashCode * 59 + AdditionalInformation.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Scheme left, Scheme right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Scheme left, Scheme right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
